{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleSubmit","event","preventDefault","alert","state","input","names","split","setState","womenTotal","womenTotalConfidence","pocTotal","pocTotalConfidence","calculatePercentage","handleChange","target","value","name","axios","get","then","response","data","console","log","catch","error","this","map","key","num","womenPercent","length","toFixed","womenConfPercent","pocPercent","pocConfPercent","className","class","onSubmit","Input","onChange","placeholder","multiline","rows","rowsMax","fullWidth","color","margin","Button","type","size","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.f6ed6312.chunk.js","sourcesContent":["/** Find out how diverse a comma-separated list of names is - perhaps\n * for a mailing list, a company employee list, etc. Just for fun! \n * Using the diversityAPI tool.\n * How many women and people of color are on your teams?\n * Author: Kristie Huang\n */\n\nimport React, { Component, useEffect } from 'react';\nimport './App.css';\nimport axios from \"axios\";\nimport { TextField, Button, Input } from \"@material-ui/core\";\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n    //STATE VS CLASS VAR = SETSTATE AUTO CALLS RENDER\n    this.state = {\n      input: \"\",\n      names: [],\n      womenTotal: 0,\n      womenTotalConfidence: 0,\n      pocTotal: 0,\n      pocTotalConfidence: 0,\n    };\n\n  }\n\n  handleSubmit = event => {\n    event.preventDefault();\n\n    alert('Checking this list of names: ' + this.state.input);\n    const names = this.state.input.split(\", \");\n\n    this.setState({\n      names: names,\n      womenTotal: 0,\n      womenTotalConfidence: 0,\n      pocTotal: 0,\n      pocTotalConfidence: 0,\n    });\n    this.calculatePercentage(names);\n\n\n  }\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({\n      input: value,\n      names: this.state.names,\n    });\n\n\n  }\n\n  /** The logic. */\n  calculatePercentage(names) {\n\n    for (const name of names) {\n      //calculate gender + likelihood\n      axios\n        .get(`https://api.diversitydata.io/?fullname=${name}`)\n        .then((response) => {\n          const { data } = response;\n\n          console.log(data);\n          this.setState({\n            womenTotal: data[\"gender\"] === \"female\" ? this.state.womenTotal + 1 : this.state.womenTotal,\n            womenTotalConfidence: this.state.womenTotalConfidence + data[\"gender probability\"],\n            pocTotal: data[\"ethnicity\"] !== \"white\" ? this.state.pocTotal + 1 : this.state.pocTotal,\n            pocTotalConfidence: this.state.pocTotalConfidence + data[\"ethnicity probability\"],\n          });\n\n\n        })\n        .catch((error) => { alert(\"There was an error. Try again?\"); });\n\n    }\n\n\n\n  }\n\n  render() {\n\n    const allNameLabels = this.state.names.map((key, num) => {\n      return (\n        <p>{key}</p>\n      );\n    });\n\n    const womenPercent = this.state.womenTotal ?\n      (this.state.womenTotal * 100 / this.state.names.length).toFixed(1) : 0;\n    const womenConfPercent = this.state.womenTotalConfidence ?\n      (this.state.womenTotalConfidence * 100 / this.state.names.length).toFixed(1) : 0;\n    const pocPercent = this.state.pocTotal ?\n      (this.state.pocTotal * 100 / this.state.names.length).toFixed(1) : 0;\n    const pocConfPercent = this.state.pocTotalConfidence ?\n      (this.state.pocTotalConfidence * 100 / this.state.names.length).toFixed(1) : 0;\n\n    return (\n      <div className=\"App\">\n\n        <h1>How many <u>women</u> and <u>people of color</u> are on your teams?</h1>\n        <p class=\"Subtitle\">API by diversitydata.io.</p>\n\n        <form onSubmit={this.handleSubmit}>\n          <Input\n            name=\"names\"\n            value={this.state.input}\n            onChange={this.handleChange}\n            placeholder=\"Comma-separated list, e.g. Abby Alligator, Ben Bulldog\"\n            multiline={true}\n            rows={1}\n            rowsMax={8}\n            fullWidth={true}\n            color='primary'\n            margin='none'\n          />\n\n          <Button\n            type=\"submit\"\n            size='large'\n            color='primary'\n          >\n            Run\n          </Button>\n        </form>\n        <h2>Your Results</h2>\n        <p>Women: {womenPercent}%</p>\n        <p class=\"Subtitle\">{womenConfPercent}% sure.</p>\n        <p>People of color: {pocPercent}%</p>\n        <p class=\"Subtitle\">{pocConfPercent}% sure.</p>\n\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}